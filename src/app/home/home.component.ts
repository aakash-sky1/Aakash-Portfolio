import { Component, OnInit } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import VisitorService from '../auth/visitor.service';
import 'bootstrap';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {
  formSubmitted = false;
  currentImageIndex = 0;
  tabs = ['Education', 'Tech Stack', 'Leadership', 'Professional'];
  selectedTab = this.tabs[0];

  downloadForm = new FormGroup({
    name: new FormControl('', Validators.required),
    company: new FormControl('', Validators.required),
    email: new FormControl('', [Validators.required, Validators.email])
  });

  constructor(
    private visitorService: VisitorService,
    private router: Router
  ) {}

  ngOnInit() {}

  images = [
    { src: "assets/images/fffff.png", message: "Earning a Bachelor of Science in Computer Science including a minor in Computer Information Systems in May 2024, demonstrating a robust foundation in both the technical and theoretical as well as the practicle and applied aspects of Computer Science" },
    { src: "assets/images/tttttt.png", message: "Earning a Bachelor of Science in Computer Science including a minor in Computer Information Systems in May 2024, demonstrating a robust foundation in both the technical and theoretical as well as the practicle and applied aspects of Computer Science" },
    { src: "assets/images/WhatsApp Image 2024-09-21 at 3.15.21 PM.png", message: "Earning a Bachelor of Science in Computer Science including a minor in Computer Information Systems in May 2024, demonstrating a robust foundation in both the technical and theoretical as well as the practicle and applied aspects of Computer Science" },

  ];

  onSubmit() {
    if (this.downloadForm.valid) {
      const formValue = this.downloadForm.value;
      const visitData = {
        name: formValue.name ?? "", // Use nullish coalescing to ensure string type
        company: formValue.company ?? "",
        email: formValue.email ?? ""
      };
      this.addVisit(visitData);
      this.downloadResume();
    } else {
      alert('Please fill out all fields correctly.');
    }
  }

  addVisit(visitData: { name: string; company: string; email: string; }) {
    this.visitorService.addVisit({
      id: '',  // Assuming the id is generated by the backend
      ...visitData
    });
  }

  downloadResume() {
    const link = document.createElement('a');
    link.href = 'assets/Aakash Sharma-RESUME (1).pdf';
    link.download = 'resume.pdf';  // Optional: you can set the default download file name
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  selectTab(tab: string): void {
    this.selectedTab = tab;
  }

  nextImage(): void {
    this.currentImageIndex = (this.currentImageIndex + 1) % this.images.length;
  }

  onMouseMove(event: MouseEvent, img: HTMLImageElement) {
    const rect = img.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    const centerX = rect.width / 2;
    const centerY = rect.height / 2;

    // Calculate angle for X axis (skewX)
    const skewX = (centerX - x) / centerX * - 10; // max skew of 10 degrees
    // Calculate angle for Y axis (skewY)
    const skewY = (centerY - y) / centerY * + 10; // max skew of 10 degrees

    img.style.transform = `perspective(2500px) rotateY(${skewX}deg) rotateX(${skewY}deg)`;
  }

  resetTransform(img: HTMLImageElement) {
    img.style.transform = '';
  }

}
